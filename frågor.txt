Jag siktar på vg!

1. När använder man add respektive commit?
Add är för att lägga till filerna som man ändrat i till staging area, alltså man signalerar att dessa
ändringar ska vara med i nästa commit.

Commit innebär att man markerar att man gjort en förändring med de ändringar man signalerat som skall ingå
i nästa commit. D.v.s. det som ligger i staging area. Med hjälp av flaggan -m lägger man till ett meddelande 
på commiten så man vet vad förändring gör, bra att ha ifall man behöver gå tillbaka.

2. Vad är pull repektive push?
Med pull laddar man ner dem commit som man inte redan har laddat ner från remote repository..

Med push laddar man upp sina ändring till remote repository så andra utvecklar kan se vad man gjort.

3. När använder man log respektive status?
Med log ser man commits som är gjorda i den branchen man befinner sig i, så det är som en historik över 
tidigare commits, där kan man även se tillhörande meddelande så man vet vad som ändrades vid varje commit.

Med status får man reda på vilken branch man är i och om det finns någon fil som är redo för add eller commit.

4. Vad är en Git branch och varför är de viktiga?
Man kan skapa en branch om man t.ex. arbetar med en ny funktion i programmet, sen kanske någon annan ska göra 
en annan funktion samtidigt så kan dem skapa en egen branch. Det gör så att flera kan jobba med samma projekt 
samtidigt utan att det blir problem. När man är färdig med sin branch så kan man göra en merge med master/main 
branchen.

VG delen.
Om man vill rulla tillbaka koden till ett tidigare tillstånd kan man använda restore, reset eller revert.
Med restore kan du flytta HEAD pekaren till en tidigare valfri commit och arbetskatalogen ändras då till den 
commitens tillstånd. Med git reset kan du skicka med argument, soft, mixed och hard. med git reset --soft HEAD~1
så flyttar du head pekaren en commit bakåt men du behåller ändringar i både arbetskatalogen och staging area.
Med git reset --mixed HEAD~1 så flyttar du också head pekaren en commit bakåt, ändringarna finns kvar i 
arbetskatalogen men dem blir unstaged så dem måste addas igen innan man kan göra en ny commit. Mixed är 
standardläget på reset. git reset --hard HEAD~1 backar en commit och ändringar i commit historiken i staging 
area och arbetskatalogen försvinner permanent, bör användas med försiktighet. Med git revert gör du en ny commit 
som går tillbaka till en tidigare commit, men den sparar historiken d.v.s. de commits som ligger mellan den nya 
commiten och den commit man ville reverta till. Revert är bra när man gör ändring på en publik branch så att alla 
tidigare ändringar finns kvar i historiken. Reset och restore är bra när man gör lokala ändringar på en branch.

Visar här nedan vad jag gjort när jag testade lite. Jag skapade en ny branch och gjorde 2 nya commits, 
”explaining restore” och ”explaining reset and revert”

tomas@Minkur:/mnt/c/yrgo/utvecklingsverktyg/guessingGame$ git log --oneline
48f2c39 (HEAD -> vgbranch) explaining reset and revert
d87f8e2 explaining restore
9e274f7 answearing question sheet

Kör sedan git revert HEAD och då försvinner texten i frågor.txt som jag skrivit om reset och revert.

 git revert HEAD
[vgbranch a1dc015] Revert "explaining reset and revert, misstakes in the text"
 1 file changed, 1 insertion(+), 10 deletions(-)

tomas@Minkur:/mnt/c/yrgo/utvecklingsverktyg/guessingGame$ git log --oneline
a1dc015 (HEAD -> vgbranch) Revert "explaining reset and revert, misstakes in the text"
48f2c39 explaining reset and revert
d87f8e2 explaining restore

Vill nu ha tillbaka texten för jag kom på att den var korrekt i alla fall och kör då git reset –hard HEAD~1

tomas@Minkur:/mnt/c/yrgo/utvecklingsverktyg/guessingGame$ git reset --hard HEAD~1
HEAD is now at 48f2c39 explaining reset and revert

tomas@Minkur:/mnt/c/yrgo/utvecklingsverktyg/guessingGame$ git log --oneline
48f2c39 (HEAD -> vgbranch) explaining reset and revert
d87f8e2 explaining restore
9e274f7 answearing question sheet

Nu är texten som tidigare var borta tillbaka igen. Och branchen är nu redo för en merge till master/main 
branchen och sedan git push upp till det publika repositoryt.
